// =============================================================================
// GRID SYSTEM
// =============================================================================

// Import variables and mixins
@import "../variables/variables";
@import "../variables/mixins";

// Container
.container {
  @include make-container();
}

.container-fluid {
  width: 100%;
  margin-right: auto;
  margin-left: auto;
  padding-right: $spacing-4;
  padding-left: $spacing-4;
}

// Row
.row {
  display: flex;
  flex-wrap: wrap;
  margin-right: -($grid-gutter / 2);
  margin-left: -($grid-gutter / 2);
}

// Columns
.col {
  flex: 1 0 0%;
  padding-right: $grid-gutter / 2;
  padding-left: $grid-gutter / 2;
}

// Auto-sizing columns
.col-auto {
  flex: 0 0 auto;
  width: auto;
  padding-right: $grid-gutter / 2;
  padding-left: $grid-gutter / 2;
}

// Generate column classes for all breakpoints
@each $breakpoint in map-keys($container-max-widths) {
  $infix: if($breakpoint == xs, "", "-#{$breakpoint}");
  
  @include media-up($breakpoint) {
    // Columns
    @for $i from 1 through $grid-columns {
      .col#{$infix}-#{$i} {
        @include make-col($i);
        padding-right: $grid-gutter / 2;
        padding-left: $grid-gutter / 2;
      }
    }
    
    // Offsets
    @for $i from 0 through ($grid-columns - 1) {
      .offset#{$infix}-#{$i} {
        @include make-col-offset($i);
      }
    }
    
    // Order
    .order#{$infix}-first { order: -1; }
    .order#{$infix}-last { order: $grid-columns + 1; }
    @for $i from 0 through $grid-columns {
      .order#{$infix}-#{$i} { order: $i; }
    }
  }
}

// Mobile-first column classes (xs breakpoint)
@for $i from 1 through $grid-columns {
  .col-#{$i} {
    @include make-col($i);
    padding-right: $grid-gutter / 2;
    padding-left: $grid-gutter / 2;
  }
}

// Mobile-first offset classes
@for $i from 0 through ($grid-columns - 1) {
  .offset-#{$i} {
    @include make-col-offset($i);
  }
}

// Mobile-first order classes
.order-first { order: -1; }
.order-last { order: $grid-columns + 1; }
@for $i from 0 through $grid-columns {
  .order-#{$i} { order: $i; }
}

// Grid utilities
.no-gutters {
  margin-right: 0;
  margin-left: 0;
  
  > .col,
  > [class*="col-"] {
    padding-right: 0;
    padding-left: 0;
  }
}

.gutters-sm {
  margin-right: -($grid-gutter / 4);
  margin-left: -($grid-gutter / 4);
  
  > .col,
  > [class*="col-"] {
    padding-right: $grid-gutter / 4;
    padding-left: $grid-gutter / 4;
  }
}

.gutters-lg {
  margin-right: -($grid-gutter);
  margin-left: -($grid-gutter);
  
  > .col,
  > [class*="col-"] {
    padding-right: $grid-gutter;
    padding-left: $grid-gutter;
  }
}

// Alignment utilities
.align-items-start { align-items: flex-start; }
.align-items-center { align-items: center; }
.align-items-end { align-items: flex-end; }
.align-items-baseline { align-items: baseline; }
.align-items-stretch { align-items: stretch; }

.align-self-start { align-self: flex-start; }
.align-self-center { align-self: center; }
.align-self-end { align-self: flex-end; }
.align-self-baseline { align-self: baseline; }
.align-self-stretch { align-self: stretch; }

.justify-content-start { justify-content: flex-start; }
.justify-content-center { justify-content: center; }
.justify-content-end { justify-content: flex-end; }
.justify-content-between { justify-content: space-between; }
.justify-content-around { justify-content: space-around; }
.justify-content-evenly { justify-content: space-evenly; }

// Responsive visibility
.d-none { display: none !important; }
.d-block { display: block !important; }
.d-flex { display: flex !important; }
.d-inline { display: inline !important; }
.d-inline-block { display: inline-block !important; }
.d-inline-flex { display: inline-flex !important; }

// Responsive visibility for different breakpoints
@each $breakpoint in map-keys($container-max-widths) {
  $infix: "-#{$breakpoint}";
  
  @include media-up($breakpoint) {
    .d#{$infix}-none { display: none !important; }
    .d#{$infix}-block { display: block !important; }
    .d#{$infix}-flex { display: flex !important; }
    .d#{$infix}-inline { display: inline !important; }
    .d#{$infix}-inline-block { display: inline-block !important; }
    .d#{$infix}-inline-flex { display: inline-flex !important; }
  }
}

// Flex utilities
.flex-row { flex-direction: row !important; }
.flex-column { flex-direction: column !important; }
.flex-row-reverse { flex-direction: row-reverse !important; }
.flex-column-reverse { flex-direction: column-reverse !important; }

.flex-wrap { flex-wrap: wrap !important; }
.flex-nowrap { flex-wrap: nowrap !important; }
.flex-wrap-reverse { flex-wrap: wrap-reverse !important; }

.flex-fill { flex: 1 1 auto !important; }
.flex-grow-0 { flex-grow: 0 !important; }
.flex-grow-1 { flex-grow: 1 !important; }
.flex-shrink-0 { flex-shrink: 0 !important; }
.flex-shrink-1 { flex-shrink: 1 !important; }

// Responsive flex utilities
@each $breakpoint in map-keys($container-max-widths) {
  $infix: "-#{$breakpoint}";
  
  @include media-up($breakpoint) {
    .flex#{$infix}-row { flex-direction: row !important; }
    .flex#{$infix}-column { flex-direction: column !important; }
    .flex#{$infix}-row-reverse { flex-direction: row-reverse !important; }
    .flex#{$infix}-column-reverse { flex-direction: column-reverse !important; }
    
    .flex#{$infix}-wrap { flex-wrap: wrap !important; }
    .flex#{$infix}-nowrap { flex-wrap: nowrap !important; }
    .flex#{$infix}-wrap-reverse { flex-wrap: wrap-reverse !important; }
    
    .flex#{$infix}-fill { flex: 1 1 auto !important; }
    .flex#{$infix}-grow-0 { flex-grow: 0 !important; }
    .flex#{$infix}-grow-1 { flex-grow: 1 !important; }
    .flex#{$infix}-shrink-0 { flex-shrink: 0 !important; }
    .flex#{$infix}-shrink-1 { flex-shrink: 1 !important; }
  }
}
